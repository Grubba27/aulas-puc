{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import fs from 'fs/promises';\n\ntype Divider = (list: string[], quantity: number) => string[][];\nconst divider: Divider =\n  (list, quantity) =>\n    list.reduce<string[][]>((accumulator, item, index) => {\n      const chunkIndex = Math.floor(index / quantity)\n\n      if (!accumulator[chunkIndex]) {\n        accumulator[chunkIndex] = []\n      }\n\n      accumulator[chunkIndex].push(item)\n      return accumulator\n    }, []);\n\ntype RemoveDuplicates = (list: any[]) => any[];;\nconst removeDuplicates: RemoveDuplicates = (list: any[]) => \n     list.reduce((acc: any, d) => acc.includes(d) ? acc : acc.concat(d), []);\n\n\ntype GetUniqueItems = (conj1: string, conj2: string) => string[];\nconst getUniqueItems: GetUniqueItems =\n  (conj1, conj2) =>\n    [...removeDuplicates(`${conj1},${conj2}`.split(\",\"))]\n\ntype GetUnique = (conj: string) => string[];\nconst getUnique: GetUnique =\n  (conj) => [...removeDuplicates(conj.split(\",\"))]\n\ntype Union = (conj1: string, conj2: string) => string;\nconst union: Union =\n  (conj1, conj2) => getUniqueItems(conj1, conj2).join(\",\");\n\ntype Intersection = (conj1: string, conj2: string) => string;\nconst intersection: Intersection =\n  (conj1, conj2) =>\n    getUniqueItems(conj1, conj2)\n      .filter(item => conj1.includes(item) && conj2.includes(item))\n      .join(\",\");\n\ntype Difference = (conj1: string, conj2: string) => string;\nconst difference: Difference =\n  (conj1, conj2) =>\n    getUniqueItems(conj1, conj2)\n      .filter(item => !conj2.includes(item))\n      .join(\",\");\n\ntype CartesianProduct = (conj1: string, conj2: string) => string;\nconst cartesianProduct: CartesianProduct =\n  (conj1, conj2) =>\n    getUnique(conj1)\n      .map(item1 => getUnique(conj2).map(item2 => `(${item1},${item2})`))\n      .reduce((accumulator, item) => [...accumulator, ...item], [])\n      .join(\",\");\n\ntype Logger = \n  (operation: string, result: string) => void;\ntype Format =\n  (conj1: string, conj2: string) => Logger;\n    \n\nconst format: Format =\n  (conj1: string, conj2: string) =>\n    (operation: string, result: string) =>\n      console.log(`${operation}: conjunto 1 {${conj1}}, conjunto 2 {${conj2}}. Resultado: {${result}} \\n`);\n\nasync function main() {\n  const FILE = await fs.readFile('./aula-01.txt', {encoding: 'utf-8'});\n\n  const [numOps, ...file] = FILE.split(\"\\n\");\n\n  const divided = divider(file, 3);\n  Array.from(Array(Number(numOps)).keys()).map((item) => {\n    const [op, conj1, conj2] = divided[item];\n    const logger = format(conj1, conj2);\n    switch (op) {\n      case \"U\":\n        return logger('Uni\u00E3o', union(conj1, conj2));\n\n      case \"I\":\n        return logger('Interce\u00E7\u00E3o', intersection(conj1, conj2));\n\n      case \"D\":\n        return logger('Diferen\u00E7a', difference(conj1, conj2));\n\n      case \"C\":\n        return logger('Produto Cartesiano', cartesianProduct(conj1, conj2));\n    }\n  })\n}\n\nmain();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,sBAAe;AAGf,MAAM,UACJ,CAAC,MAAM,aACL,KAAK,OAAmB,CAAC,aAAa,MAAM,UAAU;AACpD,QAAM,aAAa,KAAK,MAAM,QAAQ;AAEtC,MAAI,CAAC,YAAY,aAAa;AAC5B,gBAAY,cAAc;AAAA;AAG5B,cAAY,YAAY,KAAK;AAC7B,SAAO;AAAA,GACN;AAEwC;AAC/C,MAAM,mBAAqC,CAAC,SACvC,KAAK,OAAO,CAAC,KAAU,MAAM,IAAI,SAAS,KAAK,MAAM,IAAI,OAAO,IAAI;AAIzE,MAAM,iBACJ,CAAC,OAAO,UACN,CAAC,GAAG,iBAAiB,GAAG,SAAS,QAAQ,MAAM;AAGnD,MAAM,YACJ,CAAC,SAAS,CAAC,GAAG,iBAAiB,KAAK,MAAM;AAG5C,MAAM,QACJ,CAAC,OAAO,UAAU,eAAe,OAAO,OAAO,KAAK;AAGtD,MAAM,eACJ,CAAC,OAAO,UACN,eAAe,OAAO,OACnB,OAAO,UAAQ,MAAM,SAAS,SAAS,MAAM,SAAS,OACtD,KAAK;AAGZ,MAAM,aACJ,CAAC,OAAO,UACN,eAAe,OAAO,OACnB,OAAO,UAAQ,CAAC,MAAM,SAAS,OAC/B,KAAK;AAGZ,MAAM,mBACJ,CAAC,OAAO,UACN,UAAU,OACP,IAAI,WAAS,UAAU,OAAO,IAAI,WAAS,IAAI,SAAS,WACxD,OAAO,CAAC,aAAa,SAAS,CAAC,GAAG,aAAa,GAAG,OAAO,IACzD,KAAK;AAQZ,MAAM,SACJ,CAAC,OAAe,UACd,CAAC,WAAmB,WAClB,QAAQ,IAAI,GAAG,0BAA0B,uBAAuB,uBAAuB;AAAA;AAE7F,sBAAsB;AACpB,QAAM,OAAO,MAAM,wBAAG,SAAS,iBAAiB,EAAC,UAAU;AAE3D,QAAM,CAAC,WAAW,QAAQ,KAAK,MAAM;AAErC,QAAM,UAAU,QAAQ,MAAM;AAC9B,QAAM,KAAK,MAAM,OAAO,SAAS,QAAQ,IAAI,CAAC,SAAS;AACrD,UAAM,CAAC,IAAI,OAAO,SAAS,QAAQ;AACnC,UAAM,SAAS,OAAO,OAAO;AAC7B,YAAQ;AAAA,WACD;AACH,eAAO,OAAO,YAAS,MAAM,OAAO;AAAA,WAEjC;AACH,eAAO,OAAO,oBAAc,aAAa,OAAO;AAAA,WAE7C;AACH,eAAO,OAAO,gBAAa,WAAW,OAAO;AAAA,WAE1C;AACH,eAAO,OAAO,sBAAsB,iBAAiB,OAAO;AAAA;AAAA;AAAA;AAKpE;",
  "names": []
}
